# ------------------------------------------------------------------------------------------------------------
# Aufgabenstellung:
# Verändern Sie den Quelltext aus Übung 1 wie folgt:
#
# 1. Statt dem Datum des angeklickten Punktes wird das aktuelle Datum verwendet.
#    Die Datumsachse soll sich dabei dynamisch auf die Spanne zwischen dem kleinsten
#    und größten Datum plus 5 Minuten erweitern.
#
# 2. Zusätzlich wird eine zweite Datenreihe (QSplineSeries) erzeugt, die das Datum des
#    angeklickten Punktes nutzt, aber einen zufälligen Y-Wert im Wertebereich enthält.
# ------------------------------------------------------------------------------------------------------------

from PyQt6.QtCharts import QChartView, QChart, QLineSeries, QDateTimeAxis, QValueAxis  # Chart-Komponenten
from PyQt6.QtCore import Qt, QDateTime, QPointF  # Qt-Standardklassen
from PyQt6.QtGui import QMouseEvent  # Mausklick-Verarbeitung
import random  # Für Zufallszahlen

class CentralWidget(QChartView):  # Hauptanzeigeelement
    def __init__(self, parent=None):
        super(CentralWidget, self).__init__(parent)  # Konstruktor der Elternklasse aufrufen

        random.seed(QDateTime.currentMSecsSinceEpoch())  # Initialisiert den Zufallszahlengenerator mit aktueller Zeit

        # Erste Serie: Aktuelles Datum + angeklickter Y-Wert
        self.__series_clicked = QLineSeries()
        self.__series_clicked.setName("Current Time - Clicked Value")

        # Zweite Serie: Klick-Zeitpunkt + zufälliger Y-Wert
        self.__series_random = QLineSeries()
        self.__series_random.setName("Clicked Time - Random Value")

        # Zeitachse (x-Achse)
        axis_datetime = QDateTimeAxis()
        axis_datetime.setTitleText("Datum")
        start_date = QDateTime.currentDateTime().addSecs(-5 * 60)  # Start: 5 Minuten vor jetzt
        end_date = QDateTime.currentDateTime().addSecs(5 * 60)     # Ende: 5 Minuten nach jetzt
        axis_datetime.setRange(start_date, end_date)               # Anfangsbereich setzen
        axis_datetime.setFormat("hh:mm:ss")                        # Zeitformat

        # Y-Achse für beide Reihen
        axis_dollar = QValueAxis()
        axis_dollar.setTitleText("Wertebereich")
        axis_dollar.setRange(1000, 2000)  # Wertebereich für Y-Achse

        # Neues Diagramm erstellen
        self.__chart = QChart()
        self.__chart.setTitle("Random numbers, dates & mouseEvents")

        # Achsen hinzufügen
        self.__chart.addAxis(axis_datetime, Qt.AlignmentFlag.AlignBottom)
        self.__chart.addAxis(axis_dollar, Qt.AlignmentFlag.AlignLeft)

        # Datenreihen hinzufügen
        self.__chart.addSeries(self.__series_clicked)
        self.__chart.addSeries(self.__series_random)

        # Achsen mit den Datenreihen verbinden
        self.__series_clicked.attachAxis(axis_datetime)
        self.__series_clicked.attachAxis(axis_dollar)

        self.__series_random.attachAxis(axis_datetime)
        self.__series_random.attachAxis(axis_dollar)

        self.setChart(self.__chart)  # Diagramm im Widget anzeigen

    def mouseReleaseEvent(self, event: QMouseEvent) -> None:
        if event.button().LeftButton:  # Nur linke Maustaste
            event.accept()

            # Umrechnen der Mausposition in Diagrammkoordinaten (nur Y-Wert wird übernommen)
            new_value = self.__chart.mapToValue(event.pos().toPointF(), self.__series_clicked)

            # Erstes Signal: aktuelles Datum + echter Y-Wert
            new_point_clicked = QPointF(QDateTime.currentMSecsSinceEpoch(), new_value.y())
            self.__series_clicked.append(new_point_clicked)

            # Zweites Signal: angeklickte Zeit (X) + Zufallswert im Y-Bereich
            new_point_random = QPointF(new_value.x(), random.randrange(1000, 2000))

            # Geordneter Eintrag in Serie 2 (aufsteigend nach Zeit)
            for i in range(len(self.__series_random.points())):
                if self.__series_random.at(i).x() > new_point_random.x():
                    self.__series_random.insert(i, new_point_random)
                    return

            # Wenn kein späterer Zeitpunkt gefunden wurde: hinten anhängen
            self.__series_random.append(new_point_random)
